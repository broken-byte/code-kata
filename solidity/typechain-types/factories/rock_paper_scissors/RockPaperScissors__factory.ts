/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  RockPaperScissors,
  RockPaperScissorsInterface,
} from "../../rock_paper_scissors/RockPaperScissors";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gameNumber",
        type: "uint256",
      },
    ],
    name: "GameComplete",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gameNumber",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bet",
        type: "uint256",
      },
    ],
    name: "GameCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[2]",
        name: "players",
        type: "address[2]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gameNumber",
        type: "uint256",
      },
    ],
    name: "GameStarted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "participant",
        type: "address",
      },
    ],
    name: "createGame",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gameNumber",
        type: "uint256",
      },
    ],
    name: "joinGame",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gameNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "moveNumber",
        type: "uint256",
      },
    ],
    name: "makeMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611885806100206000396000f3fe6080604052600436106100345760003560e01c8063474d0b5a14610039578063dea9456d14610055578063efaa55a01461007e575b600080fd5b610053600480360381019061004e9190611003565b61009a565b005b34801561006157600080fd5b5061007c60048036038101906100779190611066565b61043c565b005b610098600480360381019061009391906110a6565b610a01565b005b600034905060004233846040516020016100b693929190611177565b6040516020818303038152906040528051906020012060001c90508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361013f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013690611237565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036101ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a5906112ef565b60405180910390fd5b6040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001600060038111156102385761023761130f565b5b8152602001600060038111156102515761025061130f565b5b81526020016000151581525060008083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555060608201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816003015560a0820151816004015560c08201518160050160006101000a81548160ff021916908360038111156103a3576103a261130f565b5b021790555060e08201518160050160016101000a81548160ff021916908360038111156103d3576103d261130f565b5b02179055506101008201518160050160026101000a81548160ff0219169083151502179055509050507f27bd49aa3baf4aa9d565998bd41f40d6ff8cb737a8b4935d9ead830220fb73bc33828460405161042f9392919061135c565b60405180910390a1505050565b81600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036104e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d8906113df565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806105b157503373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6105f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e790611471565b60405180910390fd5b600080600086815260200190815260200160002090508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b3906114dd565b60405180910390fd5b8060010160149054906101000a900460ff1661070d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070490611549565b60405180910390fd5b8060050160029054906101000a900460ff161561075f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610756906115b5565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107f9578360038111156107c9576107c861130f565b5b8160050160006101000a81548160ff021916908360038111156107ef576107ee61130f565b5b0217905550610838565b83600381111561080c5761080b61130f565b5b8160050160016101000a81548160ff021916908360038111156108325761083161130f565b5b02179055505b6000600381111561084c5761084b61130f565b5b8160050160009054906101000a900460ff1660038111156108705761086f61130f565b5b141580156108b457506000600381111561088d5761088c61130f565b5b8160050160019054906101000a900460ff1660038111156108b1576108b061130f565b5b14155b156109fa5760018160050160026101000a81548160ff0219169083151502179055506108df85610d07565b8160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600283600301546109709190611604565b9081150290604051600060405180830381858888f1935050505015801561099b573d6000803e3d6000fd5b507f91dee0f580099c7b511f44b6135eaa79542c1aa31a7fd840209c419dcc9cda098160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040516109f1929190611646565b60405180910390a15b5050505050565b80600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610aa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9d906113df565b60405180910390fd5b600080600084815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4590611471565b60405180910390fd5b8060030154341015610b95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8c906116bb565b60405180910390fd5b8060030154341115610bf8573373ffffffffffffffffffffffffffffffffffffffff166108fc826003015434610bcb91906116db565b9081150290604051600060405180830381858888f19350505050158015610bf6573d6000803e3d6000fd5b505b60018160010160146101000a81548160ff0219169083151502179055507f89fe59dabc7753e2f45187224490dd580f8b6b1dfef7bb1894b17a352d95fd7460405180604001604052808360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525084604051610cfa9291906117ba565b60405180910390a1505050565b60008060008084815260200190815260200160002090508060050160029054906101000a900460ff16610d6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d669061182f565b60405180910390fd5b8060050160019054906101000a900460ff166003811115610d9357610d9261130f565b5b8160050160009054906101000a900460ff166003811115610db757610db661130f565b5b03610dc6576000915050610f9b565b60016003811115610dda57610dd961130f565b5b8160050160009054906101000a900460ff166003811115610dfe57610dfd61130f565b5b148015610e3f5750600380811115610e1957610e1861130f565b5b8160050160019054906101000a900460ff166003811115610e3d57610e3c61130f565b5b145b80610ec0575060026003811115610e5957610e5861130f565b5b8160050160009054906101000a900460ff166003811115610e7d57610e7c61130f565b5b148015610ebf575060016003811115610e9957610e9861130f565b5b8160050160019054906101000a900460ff166003811115610ebd57610ebc61130f565b5b145b5b80610f405750600380811115610ed957610ed861130f565b5b8160050160009054906101000a900460ff166003811115610efd57610efc61130f565b5b148015610f3f575060026003811115610f1957610f1861130f565b5b8160050160019054906101000a900460ff166003811115610f3d57610f3c61130f565b5b145b5b15610f72578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050610f9b565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150505b919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fd082610fa5565b9050919050565b610fe081610fc5565b8114610feb57600080fd5b50565b600081359050610ffd81610fd7565b92915050565b60006020828403121561101957611018610fa0565b5b600061102784828501610fee565b91505092915050565b6000819050919050565b61104381611030565b811461104e57600080fd5b50565b6000813590506110608161103a565b92915050565b6000806040838503121561107d5761107c610fa0565b5b600061108b85828601611051565b925050602061109c85828601611051565b9150509250929050565b6000602082840312156110bc576110bb610fa0565b5b60006110ca84828501611051565b91505092915050565b6000819050919050565b6110ee6110e982611030565b6110d3565b82525050565b60006110ff82610fa5565b9050919050565b60008160601b9050919050565b600061111e82611106565b9050919050565b600061113082611113565b9050919050565b611148611143826110f4565b611125565b82525050565b600061115982611113565b9050919050565b61117161116c82610fc5565b61114e565b82525050565b600061118382866110dd565b6020820191506111938285611137565b6014820191506111a38284611160565b601482019150819050949350505050565b600082825260208201905092915050565b7f43616e6e6f742063726561746520612067616d65207769746820796f7572736560008201527f6c6620617320746865207061727469636970616e740000000000000000000000602082015250565b60006112216035836111b4565b915061122c826111c5565b604082019050919050565b6000602082019050818103600083015261125081611214565b9050919050565b7f5061727469636970616e7420616464726573732069732072657175697265642f60008201527f7061727469636970616e742063616e6e6f74206265207a65726f20616464726560208201527f7373000000000000000000000000000000000000000000000000000000000000604082015250565b60006112d96042836111b4565b91506112e482611257565b606082019050919050565b60006020820190508181036000830152611308816112cc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b611347816110f4565b82525050565b61135681611030565b82525050565b6000606082019050611371600083018661133e565b61137e602083018561134d565b61138b604083018461134d565b949350505050565b7f47616d6520646f6573206e6f7420657869737400000000000000000000000000600082015250565b60006113c96013836111b4565b91506113d482611393565b602082019050919050565b600060208201905081810360008301526113f8816113bc565b9050919050565b7f53656e646572206973206e6f742077686974656c69737465642061732070617260008201527f7469636970616e74000000000000000000000000000000000000000000000000602082015250565b600061145b6028836111b4565b9150611466826113ff565b604082019050919050565b6000602082019050818103600083015261148a8161144e565b9050919050565b7f47616d652063616e6e6f7420626520706c6179656420616c6f6e650000000000600082015250565b60006114c7601b836111b4565b91506114d282611491565b602082019050919050565b600060208201905081810360008301526114f6816114ba565b9050919050565b7f47616d6520686173206e6f742073746172746564207965740000000000000000600082015250565b60006115336018836111b4565b915061153e826114fd565b602082019050919050565b6000602082019050818103600083015261156281611526565b9050919050565b7f47616d6520697320616c7265616479206f766572000000000000000000000000600082015250565b600061159f6014836111b4565b91506115aa82611569565b602082019050919050565b600060208201905081810360008301526115ce81611592565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061160f82611030565b915061161a83611030565b925082820261162881611030565b9150828204841483151761163f5761163e6115d5565b5b5092915050565b600060408201905061165b600083018561133e565b611668602083018461134d565b9392505050565b7f42657420616d6f756e7420697320746f6f206c6f770000000000000000000000600082015250565b60006116a56015836111b4565b91506116b08261166f565b602082019050919050565b600060208201905081810360008301526116d481611698565b9050919050565b60006116e682611030565b91506116f183611030565b9250828203905081811115611709576117086115d5565b5b92915050565b600060029050919050565b600081905092915050565b6000819050919050565b611738816110f4565b82525050565b600061174a838361172f565b60208301905092915050565b6000602082019050919050565b61176c8161170f565b611776818461171a565b925061178182611725565b8060005b838110156117b2578151611799878261173e565b96506117a483611756565b925050600181019050611785565b505050505050565b60006060820190506117cf6000830185611763565b6117dc604083018461134d565b9392505050565b7f47616d65206973206e6f74206f76657200000000000000000000000000000000600082015250565b60006118196010836111b4565b9150611824826117e3565b602082019050919050565b600060208201905081810360008301526118488161180c565b905091905056fea2646970667358221220bd6428c3b25630bfdc460330ad39eb01ee33258242b740d77e6218e54ad1db9364736f6c63430008130033";

type RockPaperScissorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RockPaperScissorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RockPaperScissors__factory extends ContractFactory {
  constructor(...args: RockPaperScissorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RockPaperScissors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RockPaperScissors__factory {
    return super.connect(runner) as RockPaperScissors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RockPaperScissorsInterface {
    return new Interface(_abi) as RockPaperScissorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RockPaperScissors {
    return new Contract(address, _abi, runner) as unknown as RockPaperScissors;
  }
}
