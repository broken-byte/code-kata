/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TicTacToeChecker,
  TicTacToeCheckerInterface,
} from "../../tictactoe_checker/TicTacToeChecker";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8[][]",
        name: "board",
        type: "uint8[][]",
      },
    ],
    name: "checkBoard",
    outputs: [
      {
        internalType: "int8",
        name: "",
        type: "int8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610769806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ffbf293314610030575b600080fd5b61004a600480360381019061004591906105ab565b610060565b6040516100579190610610565b60405180910390f35b600061006d6001836100d4565b1561007b57600190506100cf565b6100866002836100d4565b1561009457600290506100cf565b61009d8261026e565b156100ca577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90506100cf565b600090505b919050565b6000808360028111156100ea576100e961062b565b5b905060008060008060005b6003811015610212576000805b60038110156101ca578760ff168a84815181106101225761012161065a565b5b6020026020010151828151811061013c5761013b61065a565b5b602002602001015160ff16036101b75780830361016257838061015e906106b8565b9450505b6000810361017d578680610175906106b8565b9750506101a8565b60018103610198578580610190906106b8565b9650506101a7565b84806101a3906106b8565b9550505b5b81806101b3906106eb565b9250505b80806101c2906106eb565b915050610102565b5060038360ff16036101e6576001975050505050505050610268565b600381036101fe576001975050505050505050610268565b50808061020a906106eb565b9150506100f5565b5060038160ff160361022c57600195505050505050610268565b60038460ff161480610241575060038360ff16145b8061024f575060038260ff16145b1561026257600195505050505050610268565b50505050505b92915050565b6000806000905060005b60038110156103025760005b60038110156102ee5760008583815181106102a2576102a161065a565b5b602002602001015182815181106102bc576102bb61065a565b5b602002602001015160ff16036102db5782806102d7906106b8565b9350505b80806102e6906106eb565b915050610284565b5080806102fa906106eb565b915050610278565b5060008160ff16111561031957600191505061031f565b60009150505b919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103868261033d565b810181811067ffffffffffffffff821117156103a5576103a461034e565b5b80604052505050565b60006103b8610324565b90506103c4828261037d565b919050565b600067ffffffffffffffff8211156103e4576103e361034e565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156104155761041461034e565b5b602082029050602081019050919050565b600060ff82169050919050565b61043c81610426565b811461044757600080fd5b50565b60008135905061045981610433565b92915050565b600061047261046d846103fa565b6103ae565b90508083825260208201905060208402830185811115610495576104946103f5565b5b835b818110156104be57806104aa888261044a565b845260208401935050602081019050610497565b5050509392505050565b600082601f8301126104dd576104dc610338565b5b81356104ed84826020860161045f565b91505092915050565b6000610509610504846103c9565b6103ae565b9050808382526020820190506020840283018581111561052c5761052b6103f5565b5b835b8181101561057357803567ffffffffffffffff81111561055157610550610338565b5b80860161055e89826104c8565b8552602085019450505060208101905061052e565b5050509392505050565b600082601f83011261059257610591610338565b5b81356105a28482602086016104f6565b91505092915050565b6000602082840312156105c1576105c061032e565b5b600082013567ffffffffffffffff8111156105df576105de610333565b5b6105eb8482850161057d565b91505092915050565b60008160000b9050919050565b61060a816105f4565b82525050565b60006020820190506106256000830184610601565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106c382610426565b915060ff82036106d6576106d5610689565b5b600182019050919050565b6000819050919050565b60006106f6826106e1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361072857610727610689565b5b60018201905091905056fea2646970667358221220f4c82f39b90ff3151beb5610eb5307df2191827ae665000a7a298309c8645a1064736f6c63430008130033";

type TicTacToeCheckerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TicTacToeCheckerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TicTacToeChecker__factory extends ContractFactory {
  constructor(...args: TicTacToeCheckerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TicTacToeChecker & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TicTacToeChecker__factory {
    return super.connect(runner) as TicTacToeChecker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TicTacToeCheckerInterface {
    return new Interface(_abi) as TicTacToeCheckerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TicTacToeChecker {
    return new Contract(address, _abi, runner) as unknown as TicTacToeChecker;
  }
}
